---
import SiteLayout from "../../layout/site-layout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import FormattedDate from "../../components/formatted-date.astro";

type PostsArrayByYear = {
	[year: string]: CollectionEntry<"blog">[];
};

const posts = await getCollection("blog", ({ data }) => {
	return import.meta.env.PROD ? !data.draft : true;
});
posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

/**
 * Array of array of posts. The keys are the posts years.
 */
const postsByYear = posts.reduce((accum: PostsArrayByYear, post) => {
	const year = post.data.date.getFullYear().toString();
	if (!(year in accum)) {
		accum[year] = [];
	}
	accum[year].push(post);
	return accum;
}, {});

/**
 * Array of years: `["2024", "2021", "2020"]`. Just the years where blog posts where found.
 */
const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a));
---

<SiteLayout title="Blog Articles">
	<h1 class="text-center text-4xl font-bold">Blog entries</h1>
	{
		years.map((year) => (
			<section class="mx-auto mb-10 max-w-screen-md">
				<h2 class="mb-1 mt-6 px-3">{year} Posts</h2>
				<ul class="flex flex-col divide-y divide-slate-500 divide-opacity-20 px-3">
					{postsByYear[year].map((post, idx) => (
						<li>
							<a href={`/blog/${post.slug}`} class="grid grid-cols-[80px_auto] grid-rows-[content-min_content-min] items-center gap-4 px-1 py-4 md:grid-cols-[80px_auto_100px] md:grid-rows-1">
								<img class="drop-shadow-2 row-span-2 mx-auto h-[80px] w-[80px] rounded-full bg-gray-300 object-cover md:order-1 md:row-span-1" src={post.data.cover?.src} width={100} height={100} alt="An image" loading={idx > 3 ? "lazy" : "eager"} />
								<h3 class="text-orange-600 md:order-2">{post.data.title}</h3>
								<FormattedDate className="md:order-3 mr-auto md:ml-auto" date={post.data.date} />
							</a>
						</li>
					))}
				</ul>
			</section>
		))
	}
</SiteLayout>
